
name: Build deployment artifact  
 
on:
   workflow_dispatch: 
   # push:
   #    branches: ["*"]
env:
  AUTHOR_NAME: Sas
  AUTHOR_EMAIL: basu.saswata@gmail.com
  AUTHOR_PHONE: 111-1111-11
  SUPPLIER_NAME: Sas-homelab
  SUPPLIER_URL: www.sas-homelab.com
  SUPPLIER_EMAIL: basu.saswata@gmail.com
  SUPPLIER_PHONE: 001-001-0011
  USER_DATA: service-binding
  PRODUCT_VERSION: 3
  PRODUCT_NAME: Customer-Service-1
  PROGRAM: SAS
  GROUP: HOME
  DOCKER_REPO_NAME: basusaswata/customerservice
  SCANNER_ARGS: |
      exclude-files \.github/workflows/.*
      exclude-lines ^\s+with\s+imageTag\s*=.*$ 
jobs:
  build:
######################### INSTALLATION AND RUNNER SET-UP AND CODE CHECKOUT #############################################
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - uses: actions/checkout@v4
      with:
       fetch-depth: 0
    
  
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
       java-version: '17'
       distribution: 'temurin'
       server-id: github
       settings-path: ${{ github.workspace }}

    - name: Symlink JAVA_HOME to /opt/jdk
      run: |
        sudo mkdir -p /opt
        sudo ln -s "$JAVA_HOME_17_X64" /opt/jdk
        echo "JAVA_HOME=/opt/jdk" >> $GITHUB_ENV
    - name: install valint
      uses: scribe-security/action-installer@master
      
    - name: Install OPA
      run: |
        git clone https://github.com/basusaswata/scribe_sample_policy.git  
        curl -L -o opa https://github.com/open-policy-agent/opa/releases/download/v0.11.0/opa_linux_amd64
        chmod 755 ./opa
        pwd
        ls
    - name: Manual Trivy Setup
      uses: aquasecurity/setup-trivy@v0.2.0
      with:
        cache: true
        version: v0.61.1
    - name: Install vexctl
      uses: openvex/setup-vexctl@main
    - name: Check install!
      run: vexctl version
    - name: python install
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip' # caching pip dependencies
    - name: Vexy install!
      run: pip install vexy
    - name: Set image_name env var
      run: |
          repo_full="${{ github.repository }}"
          repo_name="${repo_full##*/}"
          IMAGE_NAME="${repo_name}-${{ github.sha }}-${{env.PROGRAM}}-${{env.PRODUCT_NAME}}-${{env.PRODUCT_VERSION}}"
          IMAGE_NAME=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo $IMAGE_NAME
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.5.0
    - name: Generate Cosign Key Pair (Ephemeral)
      run: |
          COSIGN_PASSWORD="" cosign generate-key-pair
          cosign verify-attestation --help
      env:
          COSIGN_PASSWORD: ""


    
        
######################### GET LATEST GIT COMMIT SHA #####################################################
    - name: Get the latest commit SHA
      id: get_commit_sha
      run: echo "::set-output name=commit_sha::$(git rev-parse HEAD)"

######################### SECRET SCANNING AND SCA  #############################################
# RUN SECRET SCANNING AND BUILD BREAK
# RUN SCA AND BUILD BREAK
# UPLOAD SCA TEST RESULT
# GENERATE EVIDANCE OF SCA
#################################################################################################
    - name: Secret Scanner
      uses: secret-scanner/action@0.0.2
      with:
          detect-secret-additional-args: ${{ env.SCANNER_ARGS }}   
    - name: Build project with Maven
      run: mvn clean install
    - name: Depcheck
      uses: dependency-check/Dependency-Check_Action@main
      id: Depcheck
      with:
          project: 'rcustomerservice'
          path: '.'
          format: 'JSON'
          out: 'reports' # this is the default, no need to specify unless you wish to override it
          #args: >
            #--failOnCVSS 7
            #--enableRetired
          
    
    - name: Upload SCA result results
      uses: actions/upload-artifact@master
      with:
           name: Source composition analysis report
           path: ${{github.workspace}}/reports   
           
           
    - name: Generate SLSA evidence for SCA
      run: |
        #ls ${{github.workspace}}/reports 
        mkdir scaevidence
        valint evidence ${{github.workspace}}/reports/dependency-check-report.json -E -o statement --parser dependencycheck --output-directory ./scaevidence --output-file ./scaevidence/depcheck.json --product-key ${{env.PRODUCT_NAME}} --scribe.client-secret  ${{ secrets.CLIENT_SECRET }} --product-version ${{env.PRODUCT_VERSION}}
        #ls
        #ls scaevidence
        #ls ${{github.workspace}}
        #ls /home/runner/.cache/valint
        #cat ./scaevidence/depcheck.json
        
         
######################### BUILD  ################################################################
# MAVEN BUILD
# DOCKER BUILD 
#################################################################################################
    - name: Generate Build-time SBOM
      run: mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom -Dcyclonedx.output.format=json

    - name: Upload SBOM Artifact
      uses: actions/upload-artifact@master
      with:
          name: build-time-sbom
          path: target/bom.json
          
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Build and push Docker image
      run: | 
         ##BUILD THE CONTAINER AND PUSH THE IMAGE
         docker build . -t $IMAGE_NAME
         docker login --username basu.saswata@gmail.com --password ${{ secrets.DOCKPAS }}
         docker tag $IMAGE_NAME $DOCKER_REPO_NAME
         docker push $DOCKER_REPO_NAME:latest
         ## SIGN THE CONTAINER
         cosign sign --key=cosign.key $DOCKER_REPO_NAME --output-signature sig.txt
         SIGNATURE=$(cat sig.txt)
         echo "signature=$SIGNATURE" >> $GITHUB_OUTPUT
         echo "signature=$SIGNATURE" >> $GITHUB_ENV
         echo $signature
         
######################### CONTAINER PROVENANCE ###################################################
# GENERATE PROVENANCE STATEMENT AND ATTESTATION  FOR DOCKER IMAGE
#################################################################################################
    - name: Generate signed Provenance for docker image
      run: |     
        mkdir containerprov
        valint bom docker:$IMAGE_NAME -E -o attest-slsa -f  --product-key ${{env.PRODUCT_NAME}} --scribe.client-secret  ${{ secrets.CLIENT_SECRET }} --product-version ${{env.PRODUCT_VERSION}} --output-directory ./containerprov --output-file ./containerprov/$IMAGE_NAME.provenance.sig.json --attest.default x509 --ca=./.github/workflows/certs/rootCA.crt --cert=./.github/workflows/certs/server.crt --key=./.github/workflows/certs/server.key 
        valint bom docker:$IMAGE_NAME -E -o statement-slsa -f  --product-key ${{env.PRODUCT_NAME}} --scribe.client-secret  ${{ secrets.CLIENT_SECRET }} --product-version ${{env.PRODUCT_VERSION}} --output-directory ./containerprov --output-file ./containerprov/$IMAGE_NAME.provenance.statement.json 
        FILE_PATH=$(find ./containerprov -type f -name '*statement*' | head -n 1)
        echo "CONT_PROV_FILE_PATH=$FILE_PATH" >> $GITHUB_ENV
        ls ./containerprov
        mkdir trivusbom 
        ## GENERATE SBOM USING TRIVY
        trivy image --format cyclonedx --output result.sbom.cdx.json $DOCKER_REPO_NAME
        ## GENERATE SCA SCAN REPORT USING TRIVY
        trivy image --format json --output trivy-report.json $DOCKER_REPO_NAME
        #vexy -c config.yaml -i ${{ github.sha }}.result.sbom.cdx.json -o vex.json
        ## ATTEST THE SBOM AND STORE IT ALONG WITH CONTAINER IMAGE
        cosign attest --key=cosign.key --type cyclonedx --predicate result.sbom.cdx.json $DOCKER_REPO_NAME
        ls
    - name: Upload Trivy-SBOM-SCAN-VEX
      uses: actions/upload-artifact@v4
      with:
         name: Trivy-SBOM 
         path: |
          ./result.sbom.cdx.json
          ./trivy-report.json
          ./vex.json
        
        
       
######################### CONTAINER BOM #########################################################
# GENERATE BOM STATEMENT AND ATTESTATION  FOR DOCKER IMAGE
#################################################################################################        
    - name: Generate signed BOM for docker image
      run: |     
        mkdir containerbom
        valint bom docker:$IMAGE_NAME -E -o attest -f  --product-key ${{env.PRODUCT_NAME}} --scribe.client-secret  ${{ secrets.CLIENT_SECRET }} --product-version ${{env.PRODUCT_VERSION}} --output-directory ./containerbom --output-file ./containerbom/$IMAGE_NAME.bom.sig.json --attest.default x509 --ca=./.github/workflows/certs/rootCA.crt --cert=./.github/workflows/certs/server.crt  --key=./.github/workflows/certs/server.key 
        valint bom docker:$IMAGE_NAME -E -o statement -f  --product-key ${{env.PRODUCT_NAME}} --scribe.client-secret  ${{ secrets.CLIENT_SECRET }} --product-version ${{env.PRODUCT_VERSION}} --output-directory ./containerbom --output-file ./containerbom/$IMAGE_NAME.bom.statement.json
        FILE_PATH=$(find ./containerbom -type f -name '*statement*' | head -n 1)
        echo "CONT_BOM_FILE_PATH=$FILE_PATH" >> $GITHUB_ENV
        ls ./containerbom

######################### SOURCE BOM ############################################################
# GENERATE SOURCE BOM, PROVANANCE STATEMENT, SOURCE BOM ATTESTATION AND PROVENANCE ATTESTATION  
#################################################################################################    
    - name: Generate Source BOM and attestation -valint cmd
      run: |
        #valint help bom
        #valint help evidence
        #valint help verify
        # SOURCE BOM
        valint bom git:. -E -o statement -f --components commits,files --product-key ${{env.PRODUCT_NAME}} --scribe.client-secret  ${{ secrets.CLIENT_SECRET }} --product-version ${{env.PRODUCT_VERSION}} 
        # PROVENANCE STATEMENT
        valint bom git:. -E -o statement-slsa -f --components commits,files --product-key ${{env.PRODUCT_NAME}} --scribe.client-secret  ${{ secrets.CLIENT_SECRET }} --product-version  ${{env.PRODUCT_VERSION}} 
        # BOM ATTESTAITON SIGNATURE 
         valint bom git:. -E -o attest -f  --components commits,files --product-key ${{env.PRODUCT_NAME}} --scribe.client-secret  ${{ secrets.CLIENT_SECRET }} --product-version  ${{env.PRODUCT_VERSION}} --attest.default x509 --ca=./.github/workflows/certs/rootCA.crt --cert=./.github/workflows/certs/server.crt --context-type=github --key=./.github/workflows/certs/server.key 
        # PROVENANCE ATTESTATION SIGNATURE  
         valint bom git:. -E -o attest-slsa -f  --components commits,files --product-key ${{env.PRODUCT_NAME}} --scribe.client-secret  ${{ secrets.CLIENT_SECRET }} --product-version  ${{env.PRODUCT_VERSION}} --attest.default x509 --ca=./.github/workflows/certs/rootCA.crt --cert=./.github/workflows/certs/server.crt --context-type=github --key=./.github/workflows/certs/server.key 

        # BOM ATTESTAITON SIGNATURE - own key and certs
        valint bom docker:$IMAGE_NAME --format=attest-slsa --attest.default x509 --ca=./.github/workflows/certs/rootCA.crt --cert=./.github/workflows/certs/server.crt --context-type=github --key=./.github/workflows/certs/server.key 
        # PROVENANCE ATTESTATION SIGNATURE  -
        valint slsa docker:$IMAGE_NAME --format=attest-slsa --attest.default x509 --ca=./.github/workflows/certs/rootCA.crt --cert=./.github/workflows/certs/server.crt --context-type=github --key=./.github/workflows/certs/server.key 
        #valint verify git:. -i attest --rule git/no-commit-to-main@v1
        #ls
######################### VERIFY PROVENANCE SIGNATURE SOURCE AND CONTAINER #######################
##################################################################################################
    # - name: Verify container provenance attestaiton signature
    #    run: |
    #      valint verify docker:${{ github.repository }} input-format=attest-slsa --verbose=2 --bundle https://github.com/basusaswata/scribe_sample_policy.git  --rule slsa/artifact-signed@v1 --git-branch main  --product-key ${{env.PRODUCT_NAME}} --scribe.client-secret  ${{ secrets.CLIENT_SECRET }} --product-version ${{env.PRODUCT_VERSION}}
   
    - name: Verify source provenance attestaiton signature
      run: |
        # Need to fix this
        valint verify git:. -i attest-slsa --product-key ${{env.PRODUCT_NAME}} --scribe.client-secret  ${{ secrets.CLIENT_SECRET }} --product-version ${{env.PRODUCT_VERSION}} --attest.default x509 --ca=./.github/workflows/certs/server-chain.pem  --cert=./.github/workflows/certs/server.crt  
######################### VERIFY SBOM ATTESTATION USING TRIVY #######################
##################################################################################################

  
    - name: Verify SBOM using Trivy
      run: |
        cosign verify-attestation --key cosign.pub --insecure-ignore-tlog=true --type cyclonedx $DOCKER_REPO_NAME
    - name: Verify DOCKER CONTAINER using Trivy
      run: |
        cosign verify --key cosign.pub --insecure-ignore-tlog=true $DOCKER_REPO_NAME
          

######################### VERIFY SLSA SCA EVIDENCE ##############################################
# VERIFY SCA EVIDANCE
# UPLOAD EVIDENCE 
#################################################################################################       
    - name: Verify SLSA evidence for SCA
      run: |
        ls
        ./opa eval -i ./scaevidence/depcheck.json -d ./scribe_sample_policy/v1/sca/scaevidencecheck.rego 'data.verify.deny'

    - name: Upload slsa evidence for SCA
      uses: actions/upload-artifact@v4
      with:
         name: SCA SLSA evidence
         path: ./scaevidence/depcheck.json

######################### VERIFY SOURCE BOM - NO DIRECT COMMITE TO MAIN #################################
# NO DIRECT COMMITE TO MAIN
########################################################################################################  
    - name: Verify No direct commit to main
      run: | 
        pr_url=$(curl -s -H "Authorization: token ${{ secrets.GITH_TOKEN }}" -H "Accept: application/vnd.github.v3+json"  "https://api.github.com/search/issues?q=${{ steps.get_commit_sha.outputs.commit_sha }}+repo:${{ github.repository }}+is:pr" | jq -r '.items[0].pull_request.url') 
        echo $pr_url
        echo ${{ steps.get_commit_sha.outputs.commit_sha }}
         if [ "$pr_url" != "null" ]; then
          pr_commit=$(curl -s \
            -H "Authorization: token ${{ secrets.GITH_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$pr_url/commits")
          echo $pr_commit
          if [ -n "$pr_commit" ]; then
            echo "The commit was made through a pull request."
          else
            echo "The commit was made directly to the main branch. 1"
            #exit 1
          fi
        else
          echo "The commit was made directly to the main branch. 2"
          #exit 1
        fi
######################### VERIFY SOURCE BOM - REQUIRE 2 APPROVER #######################################
# PROPER BRANCH PROTECTION
########################################################################################################  
    - name: Verify Source BOM Branch protection
      run: |
       response=$(curl -s -H "Authorization: token ${{ secrets.GITH_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        https://api.github.com/repos/${{ github.repository }}/branches/main/protection)
        echo "$response" > branch_protection.json
        
        cat branch_protection.json
       ./opa eval -i ./branch_protection.json -d ./scribe_sample_policy/v1/git/requre-two-approver.rego "data.verify.message" > kuddu.json
       ./opa eval -i ./branch_protection.json -d ./scribe_sample_policy/v1/git/requre-two-approver.rego "data.verify.allow" > message.json
       # echo "----------"
       # cat kuddu.json
       # cat message.json
       json=$(cat message.json)

       # Extract the value of the "value" field using jq
       value=$(echo "$json" | jq -r '.result[0].expressions[0].value')
      
       # Output the value
       echo "The value field is: $value"
         if [ "$value" = "false" ]; then
          echo "Proper branch protection is not set"
          #exit 1
        fi

######################### UPLOAD ALL BOM AND PROVENANCE STATEMENT ######################################
# UPLOAD SOURCE BOM
# UPLOAD SOURCE PROVENANCE
# UPLOAD SOURCE BOM VERIFICATION REPORT
# UPLOAD CONTAINER BOM
# UPLOAD CONTAINER PROVENANCE
########################################################################################################  
  
    - name: Upload Source BOM 
      uses: actions/upload-artifact@v4
      with:
         name: Source BOM
         path: /home/runner/.cache/valint/sha1-${{ github.sha }}.bom.statement.json
         
    - name: Upload Source Provenance 
      uses: actions/upload-artifact@v4
      with:
         name: Source Provenance
         path: /home/runner/.cache/valint/sha1-${{ github.sha }}.provenance.statement.json
    - name: Upload Source verification evidence 
      uses: actions/upload-artifact@v4
      with:
         name: Source BOM verification report
         path: /home/runner/.cache/valint/sha1-${{ github.sha }}.sarif.json
         
    - name: Upload Container BOM 
      uses: actions/upload-artifact@v4
      with:
         name: Container BOM
         path: ${{ env.CONT_BOM_FILE_PATH }}
         
    - name: Upload Container PROVENANCE 
      uses: actions/upload-artifact@v4
      with:
         name: Container PROVENANCE
         path: ${{ env.CONT_PROV_FILE_PATH }}      
   
    - name: Upload Cosign public key and signature
      uses: actions/upload-artifact@v4
      with:
         name: cosign-public-key-and-signature
         path: |
            ./cosign.pub
            ./sig.txt
    
  
         
    # - name: Upload SLSA provenance statement
    #   uses: actions/upload-artifact@v4
    #   with:
    #      name: provenance
    #      path: ${{ steps.valint_slsa_statement.outputs.OUTPUT_PATH }}
         
    # - name: List environment variables
    #   run: env
